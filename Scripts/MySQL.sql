/**VER STOCK**/
USE `sch_kiosco`;
DROP procedure IF EXISTS `SP_STOCK_ACTUAL`;

DELIMITER $$
USE `sch_kiosco`$$
CREATE PROCEDURE `SP_STOCK_ACTUAL`(IN DES VARCHAR(255))
BEGIN 
	IF DES <> '' THEN 
		SELECT PR.CODIGO_BARRAS,PR.NOMBRE,S.STOCK_MINIMO,S.STOCK_ACTUAL,
        CASE
        WHEN S.STOCK_MINIMO < S.STOCK_ACTUAL THEN (S.STOCK_ACTUAL - S.STOCK_MINIMO) 
        WHEN S.STOCK_MINIMO > S.STOCK_ACTUAL THEN (S.STOCK_MINIMO - S.STOCK_ACTUAL) 
        END as STOCK_FALTANTE,
        
        P.VALOR_COSTO,P.VALOR_VENTA,date_format(S.FECHA_REPO,'%d/%m/%y') AS FECHA_REPO,case when S.USUARIO_ID is null then 0 else S.USUARIO_ID end as USUARIO_ID
		FROM SCH_KIOSCO.stock AS S INNER JOIN  SCH_KIOSCO.product AS PR ON S.PRODUCT_ID = PR.PRODUCT_ID
		INNER JOIN SCH_KIOSCO.price AS P ON PR.PRODUCT_ID = P.PRODUCT_ID
		WHERE P.VALOR_COSTO <> 0 AND P.VALOR_VENTA <> 0 AND PR.NOMBRE LIKE concat('%',DES,'%')
        ORDER BY (S.STOCK_MINIMO - S.STOCK_ACTUAL);
	ELSE 
		SELECT PR.CODIGO_BARRAS,PR.NOMBRE,S.STOCK_MINIMO,S.STOCK_ACTUAL,(S.STOCK_MINIMO - S.STOCK_ACTUAL) as STOCK_FALTANTE,P.VALOR_COSTO,P.VALOR_VENTA,date_format(S.FECHA_REPO,'%d/%m/%y') AS FECHA_REPO,case when S.USUARIO_ID is null then 0 else S.USUARIO_ID end as USUARIO_ID
		FROM SCH_KIOSCO.stock AS S INNER JOIN  SCH_KIOSCO.product AS PR ON S.PRODUCT_ID = PR.PRODUCT_ID
		INNER JOIN SCH_KIOSCO.price AS P ON PR.PRODUCT_ID = P.PRODUCT_ID
		WHERE P.VALOR_COSTO <> 0 AND P.VALOR_VENTA <> 0
        ORDER BY (S.STOCK_MINIMO - S.STOCK_ACTUAL);
	END IF;
END
DELIMITER ;

/**NUEVO ITEM VENTA**/
USE `sch_kiosco`;
DROP procedure IF EXISTS `NUEVO_ITEM`;

DELIMITER $$
USE `sch_kiosco`$$
CREATE PROCEDURE `NUEVO_ITEM`(IN CODBAR VARCHAR(255))
BEGIN
	IF CODBAR <> "" THEN
		select p.CODIGO_BARRAS,p.NOMBRE,s.STOCK_MINIMO,s.STOCK_ACTUAL as STOCK_DISPONIBLE ,1 AS CANTIDAD,pr.VALOR_VENTA, pr.VALOR_VENTA AS SUBTOTAL,p.IS_TEMPORAL
		from sch_kiosco.product as p inner join sch_kiosco.price as pr on pr.PRODUCT_ID = p.PRODUCT_ID
        inner join SCH_KIOSCO.stock as s on s.PRODUCT_ID = p.PRODUCT_ID
		WHERE pr.valor_costo <> 0 and p.codigo_barras = CODBAR;
	END IF;
END
DELIMITER ;

/**NUEVA VENTA**/
USE `sch_kiosco`;
DROP procedure IF EXISTS `NUEVA_VENTA`;

DELIMITER $$
USE `sch_kiosco`$$
CREATE PROCEDURE `NUEVA_VENTA`()
BEGIN 
declare maxlinea int;
declare maxventa int;

set maxlinea = (select max(venta_id) from SCH_KIOSCO.linea_de_venta);
set maxventa = (select max(venta_id) from SCH_KIOSCO.venta);

if maxlinea = maxventa or maxventa is null then
	INSERT INTO SCH_KIOSCO.VENTA(FECHA_VENTA,HORA) values (now(),curtime());
end if;
    SELECT 
    case
    when MAX(VENTA_ID) is null then 1
    else MAX(VENTA_ID) 
	end AS ULTIMO
    FROM SCH_KIOSCO.VENTA;
END
DELIMITER ;

/**INSERTAR VENTA**/
USE `sch_kiosco`;
DROP procedure IF EXISTS `INSERTAR_VENTA`;

DELIMITER $$
USE `sch_kiosco`$$
CREATE  PROCEDURE `INSERTAR_VENTA`(IN V_ID INT,IN P_ID VARCHAR(255),IN SUBT DOUBLE, IN FACT INT, IN CANT INT)
BEGIN

DECLARE PROD BIGINT(20);
DECLARE DISP DOUBLE;

SET PROD = (SELECT product_id FROM product where codigo_barras = P_ID);
SET DISP = (SELECT (STOCK_ACTUAL - CANT) FROM STOCK WHERE PRODUCT_ID = PROD);
	IF PROD IS NOT NULL AND DISP >= 0 THEN
		INSERT SCH_KIOSCO.linea_de_venta (VENTA_ID,PRODUCT_ID,SUBTOTAL,FECHA_LINEA_VENTA,IS_FACTURABLE,CANTIDAD)
        VALUES (V_ID,PROD,SUBT,now(),FACT,CANT);
        
        UPDATE STOCK SET STOCK_ACTUAL = (STOCK_ACTUAL - CANT) WHERE PRODUCT_ID = PROD;
	END IF;
END
DELIMITER ;


/**INSERTAR PRODUCTO**/
USE `sch_kiosco`;
DROP procedure IF EXISTS `INSERTAR_PRODUCTO`;

DELIMITER $$
USE `sch_kiosco`$$
CREATE PROCEDURE `INSERTAR_PRODUCTO`(IN CAT varchar(255),
										IN TEMP INT,
										IN CODBAR VARCHAR(255),
                                        IN NOMBRE VARCHAR(255),
                                        IN SM BIGINT(20),
                                        IN SA BIGINT(20),
                                        IN PC DOUBLE,
                                        IN PV DOUBLE,
                                        IN USER BIGINT(20))
BEGIN
	DECLARE PROD_ID BIGINT(20);
    DECLARE CODIGO_DUP INT;
    DECLARE CATEGORIA INT;
    SET CATEGORIA = (select CATEGORY_ID from product_category where CATEGORY_NAME = CAT);
    SET CODIGO_DUP = (SELECT COUNT(*) FROM PRODUCT WHERE CODIGO_BARRAS = CODBAR);
    
	IF CODIGO_DUP = 0 AND CATEGORIA IS NOT NULL THEN
		INSERT INTO PRODUCT(CATEGORY_ID,IS_TEMPORAL,FECHA_ALTA,CODIGO_BARRAS,FECHA_ACTUALIZACION,NOMBRE) VALUES (
		CATEGORIA,TEMP,NOW(),CODBAR,NOW(),NOMBRE);
		
		SET PROD_ID = (SELECT PRODUCT_ID FROM PRODUCT WHERE CODIGO_BARRAS = CODBAR);
		
		INSERT INTO STOCK(PRODUCT_ID,FECHA_REPO,USUARIO_ID,STOCK_MINIMO,STOCK_ACTUAL) VALUES(
		PROD_ID,NOW(),USER,SM,SA);
		
		INSERT INTO PRICE(PRODUCT_ID,IS_ACTIVE,VALOR_VENTA,VALOR_COSTO,PRICE_LIST_ID,FECHA_ACTUALIZACION) VALUES(
		PROD_ID,1,PV,PC,1,NOW());
        
        SELECT 0 AS SALIDA;
    ELSE
		SELECT 1 AS SALIDA;
	END IF;
END
DELIMITER ;


/**EN_ESTADO_REPOSICION**/
USE `sch_kiosco`;
DROP procedure IF EXISTS `EN_ESTADO_REPOSICION`;

DELIMITER $$
USE `sch_kiosco`$$
CREATE PROCEDURE `EN_ESTADO_REPOSICION`()
BEGIN 
	SELECT PR.CODIGO_BARRAS,PR.NOMBRE,S.STOCK_MINIMO,S.STOCK_ACTUAL,
    case 
    when (S.STOCK_ACTUAL - S.STOCK_MINIMO) <= 5 then 1
    when (S.STOCK_ACTUAL - S.STOCK_MINIMO) <= 0 then 2
    else 3
    end as ESTADO
	FROM SCH_KIOSCO.stock AS S INNER JOIN  SCH_KIOSCO.product AS PR ON S.PRODUCT_ID = PR.PRODUCT_ID
	WHERE (S.STOCK_ACTUAL - S.STOCK_MINIMO) <= 5
	ORDER BY S.PRODUCT_ID;
END
DELIMITER ;


/**CATEGORIAS**/
USE `sch_kiosco`;
DROP procedure IF EXISTS `CATEGORIAS`;

DELIMITER $$
USE `sch_kiosco`$$
CREATE PROCEDURE `CATEGORIAS`()
BEGIN
	select *
    from product_category
    where is_active = 1;
END
DELIMITER ;

/**BUSCAR_PRODUCTO**/
USE `sch_kiosco`;
DROP procedure IF EXISTS `BUSCAR_PRODUCTO`;

DELIMITER $$
USE `sch_kiosco`$$
CREATE PROCEDURE `BUSCAR_PRODUCTO`(IN CODBAR VARCHAR(255))
BEGIN
	IF CODBAR <> '' THEN
		SELECT P.CODIGO_BARRAS, P.NOMBRE,PC.CATEGORY_NAME,P.FECHA_ACTUALIZACION,PR.VALOR_COSTO,PR.VALOR_VENTA,S.STOCK_ACTUAL,S.FECHA_REPO
		FROM product AS P INNER JOIN price AS PR ON P.PRODUCT_ID = PR.PRODUCT_ID
		INNER JOIN stock AS S ON P.PRODUCT_ID = S.PRODUCT_ID
		INNER JOIN product_category AS PC ON PC.CATEGORY_ID = P.CATEGORY_ID
		WHERE PR.VALOR_COSTO <> 0 AND P.CODIGO_BARRAS = CODBAR;
	ELSE 
		SELECT P.CODIGO_BARRAS, P.NOMBRE,PC.CATEGORY_NAME,P.FECHA_ACTUALIZACION,PR.VALOR_COSTO,PR.VALOR_VENTA,S.STOCK_ACTUAL,S.FECHA_REPO
		FROM product AS P INNER JOIN price AS PR ON P.PRODUCT_ID = PR.PRODUCT_ID
		INNER JOIN stock AS S ON P.PRODUCT_ID = S.PRODUCT_ID
		INNER JOIN product_category AS PC ON PC.CATEGORY_ID = P.CATEGORY_ID
		WHERE PR.VALOR_COSTO <> 0;
	END IF;
END
DELIMITER ;

/**ACTUALIZAR_STOCK**/
USE `sch_kiosco`;
DROP procedure IF EXISTS `ACTUALIZAR_STOCK`;

DELIMITER $$
USE `sch_kiosco`$$
CREATE PROCEDURE `ACTUALIZAR_STOCK`(IN CODBAR VARCHAR(255), IN STOCKMIN INT, IN STOCKACT INT, IN USR INT)
BEGIN 
	UPDATE SCH_KIOSCO.stock as S INNER JOIN SCH_KIOSCO.product as p on S.PRODUCT_ID = p.PRODUCT_ID
    SET S.STOCK_ACTUAL = STOCKACT , S.STOCK_MINIMO = STOCKMIN, S.FECHA_REPO = now(), S.USUARIO_ID = USR
    where p.CODIGO_BARRAS = CODBAR;
END
DELIMITER ;

USE `sch_kiosco`;
DROP procedure IF EXISTS `CAJA_PARCIAL`;

DELIMITER $$
USE `sch_kiosco`$$
CREATE PROCEDURE `CAJA_PARCIAL` ()
BEGIN
	select date(l.FECHA_LINEA_VENTA) as FECHA_LINEA_VENTA,p.PRODUCT_ID,p.NOMBRE, sum(s.STOCK_ACTUAL) as CANTIDAD_DISPONIBLE,sum(l.CANTIDAD) as CANTIDAD_VENDIDA ,sum(l.SUBTOTAL) as GANANCIA
	from stock as s inner join product as p on s.PRODUCT_ID = p.PRODUCT_ID
	inner join linea_de_venta as l on p.PRODUCT_ID = p.PRODUCT_ID
	where date(l.FECHA_LINEA_VENTA) = date(now())
	group by p.PRODUCT_ID,p.NOMBRE, DATE(l.FECHA_LINEA_VENTA);
END$$

DELIMITER ;